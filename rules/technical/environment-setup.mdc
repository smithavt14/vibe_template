---
description: 
globs: 
alwaysApply: false
---
# Environment Setup Patterns

## Environment Variables

### **File Structure**
```
.env.local          # Local development (never commit)
.env.example        # Template for required variables (commit this)
.env.production     # Production-specific variables (if needed)
```

### **Variable Categories**

#### **Public Variables** (Client-accessible)
```env
# .env.local
NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_...
```

#### **Private Variables** (Server-only)
```env
# .env.local
DATABASE_URL=postgresql://user:password@localhost:5432/database
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key
STRIPE_SECRET_KEY=sk_test_...
OPENAI_API_KEY=sk-...
SMTP_PASSWORD=your-smtp-password
JWT_SECRET=your-jwt-secret
```

### **Environment Template**
```env
# .env.example
# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=your-project-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key

# App Configuration  
NEXT_PUBLIC_APP_URL=http://localhost:3000

# Database
DATABASE_URL=postgresql://user:password@localhost:5432/database

# Authentication
JWT_SECRET=your-jwt-secret

# External APIs
OPENAI_API_KEY=sk-...
STRIPE_SECRET_KEY=sk_test_...
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_...

# Email
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-app-password
```

### **Environment Validation**
```typescript
// lib/env.ts
import { z } from "zod"

const envSchema = z.object({
  // Public variables
  NEXT_PUBLIC_SUPABASE_URL: z.string().url(),
  NEXT_PUBLIC_SUPABASE_ANON_KEY: z.string().min(1),
  NEXT_PUBLIC_APP_URL: z.string().url(),
  
  // Private variables
  DATABASE_URL: z.string().url(),
  SUPABASE_SERVICE_ROLE_KEY: z.string().min(1),
  JWT_SECRET: z.string().min(32),
  
  // Optional variables
  OPENAI_API_KEY: z.string().optional(),
  STRIPE_SECRET_KEY: z.string().optional()
})

export const env = envSchema.parse(process.env)

// Usage in server code
import { env } from "@/lib/env"
console.log(env.DATABASE_URL) // Type-safe and validated
```

## Project Configuration

### **Package.json Scripts**
```json
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "lint:fix": "next lint --fix",
    "type-check": "tsc --noEmit",
    
    "db:generate": "drizzle-kit generate",
    "db:push": "drizzle-kit push",
    "db:studio": "drizzle-kit studio",
    "db:seed": "tsx scripts/seed.ts",
    
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:coverage": "vitest --coverage",
    
    "prepare": "husky install"
  }
}
```

### **TypeScript Configuration**
```json
// tsconfig.json
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": ["node_modules"]
}
```

### **Tailwind Configuration**
```javascript
// tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
      },
    },
  },
  plugins: [require("daisyui")],
  daisyui: {
    themes: ["light", "dark"],
  },
}
```

### **Next.js Configuration**
```javascript
// next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    serverComponentsExternalPackages: ["@node-rs/argon2"]
  },
  images: {
    domains: ["your-supabase-project.supabase.co"],
    remotePatterns: [
      {
        protocol: "https",
        hostname: "**",
      },
    ],
  },
  env: {
    CUSTOM_KEY: process.env.CUSTOM_KEY,
  },
}

module.exports = nextConfig
```

## Database Configuration

### **Drizzle Configuration**
```typescript
// drizzle.config.ts
import type { Config } from "drizzle-kit"
import { env } from "@/lib/env"

export default {
  schema: "./db/schema/index.ts",
  out: "./db/migrations",
  driver: "pg",
  dbCredentials: {
    connectionString: env.DATABASE_URL,
  },
  verbose: true,
  strict: true,
} satisfies Config
```

### **Database Client**
```typescript
// db/db.ts
import { drizzle } from "drizzle-orm/postgres-js"
import postgres from "postgres"
import { env } from "@/lib/env"
import * as schema from "@/db/schema"

const client = postgres(env.DATABASE_URL)

export const db = drizzle(client, { 
  schema,
  logger: process.env.NODE_ENV === "development"
})
```

### **Connection Pooling**
```typescript
// lib/db-pool.ts
import { drizzle } from "drizzle-orm/postgres-js"
import postgres from "postgres"

const connectionString = process.env.DATABASE_URL!

// Create connection pool
const sql = postgres(connectionString, {
  max: 10, // Maximum connections
  idle_timeout: 20, // Close connections after 20 seconds of inactivity
  connect_timeout: 10, // Connection timeout
})

export const pooledDb = drizzle(sql)
```

## Development Tools

### **ESLint Configuration**
```json
// .eslintrc.json
{
  "extends": [
    "next/core-web-vitals",
    "@typescript-eslint/recommended"
  ],
  "rules": {
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/no-explicit-any": "warn",
    "react-hooks/exhaustive-deps": "warn"
  }
}
```

### **Prettier Configuration**
```json
// .prettierrc
{
  "semi": false,
  "trailingComma": "es5",
  "singleQuote": false,
  "tabWidth": 2,
  "useTabs": false,
  "printWidth": 80
}
```

### **Git Hooks with Husky**
```json
// .husky/pre-commit
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

npm run lint
npm run type-check
```

### **VS Code Settings**
```json
// .vscode/settings.json
{
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "typescript.preferences.importModuleSpecifier": "non-relative",
  "typescript.suggest.autoImports": true
}
```

## Environment-Specific Configurations

### **Development Environment**
```typescript
// lib/config.ts
export const config = {
  isDevelopment: process.env.NODE_ENV === "development",
  isProduction: process.env.NODE_ENV === "production",
  
  database: {
    url: process.env.DATABASE_URL!,
    maxConnections: process.env.NODE_ENV === "production" ? 20 : 5,
  },
  
  auth: {
    jwtSecret: process.env.JWT_SECRET!,
    sessionDuration: "7d",
  },
  
  api: {
    baseUrl: process.env.NEXT_PUBLIC_APP_URL!,
    timeout: 10000,
  },
  
  features: {
    analytics: process.env.NODE_ENV === "production",
    debugMode: process.env.NODE_ENV === "development",
  }
}
```

### **Feature Flags**
```typescript
// lib/feature-flags.ts
export const features = {
  newDashboard: process.env.FEATURE_NEW_DASHBOARD === "true",
  betaFeatures: process.env.FEATURE_BETA_ACCESS === "true",
  aiAssistant: process.env.FEATURE_AI_ASSISTANT === "true",
  
  // Database feature flags
  useConnectionPooling: process.env.DB_USE_POOLING === "true",
  enableQueryLogging: process.env.DB_ENABLE_LOGGING === "true",
} as const

// Usage
if (features.newDashboard) {
  // Render new dashboard
}
```

### **Environment-specific Utilities**
```typescript
// lib/utils/env.ts
export function isDevelopment() {
  return process.env.NODE_ENV === "development"
}

export function isProduction() {
  return process.env.NODE_ENV === "production"
}

export function isServer() {
  return typeof window === "undefined"
}

export function isClient() {
  return typeof window !== "undefined"
}

export function getBaseUrl() {
  if (isServer()) {
    return process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3000"
  }
  return window.location.origin
}
```

## Security Best Practices

### **Environment Variable Security**
```typescript
// lib/security.ts
export function validateEnvVar(name: string, value: string | undefined): string {
  if (!value) {
    throw new Error(`Missing required environment variable: ${name}`)
  }
  return value
}

export function getSecureEnvVar(name: string): string {
  const value = process.env[name]
  return validateEnvVar(name, value)
}

// Usage
const apiKey = getSecureEnvVar("OPENAI_API_KEY")
```

### **Secrets Management**
```typescript
// lib/secrets.ts
interface Secrets {
  database: {
    url: string
    password: string
  }
  auth: {
    jwtSecret: string
    sessionSecret: string
  }
  external: {
    stripeSecret: string
    openaiKey: string
  }
}

export const secrets: Secrets = {
  database: {
    url: getSecureEnvVar("DATABASE_URL"),
    password: getSecureEnvVar("DATABASE_PASSWORD"),
  },
  auth: {
    jwtSecret: getSecureEnvVar("JWT_SECRET"),
    sessionSecret: getSecureEnvVar("SESSION_SECRET"),
  },
  external: {
    stripeSecret: getSecureEnvVar("STRIPE_SECRET_KEY"),
    openaiKey: getSecureEnvVar("OPENAI_API_KEY"),
  }
}
```

## Deployment Configuration

### **Docker Configuration**
```dockerfile
# Dockerfile
FROM node:18-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

COPY package.json pnpm-lock.yaml ./
RUN npm install -g pnpm && pnpm install --frozen-lockfile

FROM node:18-alpine AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

ENV NEXT_TELEMETRY_DISABLED 1
RUN npm run build

FROM node:18-alpine AS runner
WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

USER nextjs

EXPOSE 3000

ENV PORT 3000

CMD ["npm", "start"]
```

### **Docker Compose for Development**
```yaml
# docker-compose.yml
version: '3.8'

services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/myapp
    depends_on:
      - db
      
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: myapp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
```
