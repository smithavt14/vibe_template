---
description: 
globs: 
alwaysApply: false
---
# Design Patterns

## Design Philosophy

### **Consistency First**
- Use DaisyUI components as the foundation for all UI elements
- Maintain consistent typography, spacing, and color schemes
- Create reusable components for common UI patterns
- Follow responsive design principles

### **Component Hierarchy**
- **Base Components**: DaisyUI components (buttons, inputs, cards)
- **Composite Components**: Custom combinations of base components
- **Layout Components**: Page structure and navigation elements
- **Feature Components**: Business logic components

## Typography Standards

### **Font Configuration**
```css
/* globals.css - Add to your global styles */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

:root {
  --font-primary: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
  --font-mono: 'Fira Code', 'Monaco', 'Cascadia Code', monospace;
}

body {
  font-family: var(--font-primary);
  font-weight: 400;
  line-height: 1.6;
}
```

### **Typography Scale**
```tsx
// components/ui/typography.tsx
"use client"

interface TypographyProps {
  children: React.ReactNode
  className?: string
}

// Display Text (Hero sections, landing pages)
export function DisplayText({ children, className = "" }: TypographyProps) {
  return (
    <h1 className={`text-5xl md:text-6xl lg:text-7xl font-bold leading-tight ${className}`}>
      {children}
    </h1>
  )
}

// Headings
export function H1({ children, className = "" }: TypographyProps) {
  return (
    <h1 className={`text-4xl font-bold text-base-content ${className}`}>
      {children}
    </h1>
  )
}

export function H2({ children, className = "" }: TypographyProps) {
  return (
    <h2 className={`text-3xl font-semibold text-base-content ${className}`}>
      {children}
    </h2>
  )
}

export function H3({ children, className = "" }: TypographyProps) {
  return (
    <h3 className={`text-2xl font-semibold text-base-content ${className}`}>
      {children}
    </h3>
  )
}

export function H4({ children, className = "" }: TypographyProps) {
  return (
    <h4 className={`text-xl font-medium text-base-content ${className}`}>
      {children}
    </h4>
  )
}

// Body Text
export function BodyLarge({ children, className = "" }: TypographyProps) {
  return (
    <p className={`text-lg text-base-content/80 ${className}`}>
      {children}
    </p>
  )
}

export function BodyText({ children, className = "" }: TypographyProps) {
  return (
    <p className={`text-base text-base-content/80 ${className}`}>
      {children}
    </p>
  )
}

export function BodySmall({ children, className = "" }: TypographyProps) {
  return (
    <p className={`text-sm text-base-content/70 ${className}`}>
      {children}
    </p>
  )
}

// Special Text
export function Caption({ children, className = "" }: TypographyProps) {
  return (
    <span className={`text-xs text-base-content/60 uppercase tracking-wide ${className}`}>
      {children}
    </span>
  )
}

export function Code({ children, className = "" }: TypographyProps) {
  return (
    <code className={`text-sm font-mono bg-base-200 px-2 py-1 rounded ${className}`}>
      {children}
    </code>
  )
}
```

## DaisyUI Component Standards

### **Button Patterns**
```tsx
// components/ui/button-variants.tsx
"use client"

interface ButtonProps {
  children: React.ReactNode
  onClick?: () => void
  disabled?: boolean
  loading?: boolean
  className?: string
}

// Primary Actions (Save, Submit, Create)
export function PrimaryButton({ children, loading, className = "", ...props }: ButtonProps) {
  return (
    <button 
      className={`btn btn-primary ${loading ? 'loading' : ''} ${className}`}
      {...props}
    >
      {!loading && children}
    </button>
  )
}

// Secondary Actions (Cancel, Back)
export function SecondaryButton({ children, className = "", ...props }: ButtonProps) {
  return (
    <button className={`btn btn-secondary ${className}`} {...props}>
      {children}
    </button>
  )
}

// Destructive Actions (Delete, Remove)
export function DangerButton({ children, loading, className = "", ...props }: ButtonProps) {
  return (
    <button 
      className={`btn btn-error ${loading ? 'loading' : ''} ${className}`}
      {...props}
    >
      {!loading && children}
    </button>
  )
}

// Ghost/Subtle Actions
export function GhostButton({ children, className = "", ...props }: ButtonProps) {
  return (
    <button className={`btn btn-ghost ${className}`} {...props}>
      {children}
    </button>
  )
}

// Icon Buttons
export function IconButton({ children, className = "", ...props }: ButtonProps) {
  return (
    <button className={`btn btn-square btn-ghost ${className}`} {...props}>
      {children}
    </button>
  )
}
```

### **Form Component Standards**
```tsx
// components/ui/form-elements.tsx
"use client"

interface InputProps {
  label: string
  name: string
  type?: string
  placeholder?: string
  required?: boolean
  error?: string
  className?: string
}

export function FormInput({ 
  label, 
  name, 
  type = "text", 
  placeholder, 
  required, 
  error,
  className = "" 
}: InputProps) {
  return (
    <div className="form-control w-full">
      <label className="label">
        <span className="label-text font-medium">
          {label}
          {required && <span className="text-error ml-1">*</span>}
        </span>
      </label>
      <input
        type={type}
        name={name}
        placeholder={placeholder}
        className={`input input-bordered w-full ${error ? 'input-error' : ''} ${className}`}
        required={required}
      />
      {error && (
        <label className="label">
          <span className="label-text-alt text-error">{error}</span>
        </label>
      )}
    </div>
  )
}

export function FormTextarea({ 
  label, 
  name, 
  placeholder, 
  required, 
  error,
  rows = 4,
  className = "" 
}: InputProps & { rows?: number }) {
  return (
    <div className="form-control w-full">
      <label className="label">
        <span className="label-text font-medium">
          {label}
          {required && <span className="text-error ml-1">*</span>}
        </span>
      </label>
      <textarea
        name={name}
        placeholder={placeholder}
        rows={rows}
        className={`textarea textarea-bordered w-full ${error ? 'textarea-error' : ''} ${className}`}
        required={required}
      />
      {error && (
        <label className="label">
          <span className="label-text-alt text-error">{error}</span>
        </label>
      )}
    </div>
  )
}

export function FormSelect({ 
  label, 
  name, 
  options, 
  required, 
  error,
  placeholder = "Select an option",
  className = "" 
}: InputProps & { options: { value: string; label: string }[] }) {
  return (
    <div className="form-control w-full">
      <label className="label">
        <span className="label-text font-medium">
          {label}
          {required && <span className="text-error ml-1">*</span>}
        </span>
      </label>
      <select
        name={name}
        className={`select select-bordered w-full ${error ? 'select-error' : ''} ${className}`}
        required={required}
      >
        <option disabled selected value="">
          {placeholder}
        </option>
        {options.map((option) => (
          <option key={option.value} value={option.value}>
            {option.label}
          </option>
        ))}
      </select>
      {error && (
        <label className="label">
          <span className="label-text-alt text-error">{error}</span>
        </label>
      )}
    </div>
  )
}
```

### **Card Component Standards**
```tsx
// components/ui/card-variants.tsx
"use client"

interface CardProps {
  children: React.ReactNode
  className?: string
  padding?: "none" | "sm" | "md" | "lg"
}

// Standard Content Card
export function ContentCard({ children, className = "", padding = "md" }: CardProps) {
  const paddingClasses = {
    none: "",
    sm: "p-4",
    md: "p-6", 
    lg: "p-8"
  }

  return (
    <div className={`card bg-base-100 shadow-lg border border-base-300 ${className}`}>
      <div className={`card-body ${paddingClasses[padding]}`}>
        {children}
      </div>
    </div>
  )
}

// Interactive Card (hover effects)
export function InteractiveCard({ children, className = "", padding = "md" }: CardProps) {
  const paddingClasses = {
    none: "",
    sm: "p-4",
    md: "p-6", 
    lg: "p-8"
  }

  return (
    <div className={`card bg-base-100 shadow-lg border border-base-300 hover:shadow-xl transition-shadow cursor-pointer ${className}`}>
      <div className={`card-body ${paddingClasses[padding]}`}>
        {children}
      </div>
    </div>
  )
}

// Stats Card
export function StatsCard({ 
  title, 
  value, 
  description,
  icon,
  className = "" 
}: {
  title: string
  value: string | number
  description?: string
  icon?: React.ReactNode
  className?: string
}) {
  return (
    <div className={`stats shadow-lg border border-base-300 ${className}`}>
      <div className="stat">
        {icon && <div className="stat-figure text-primary">{icon}</div>}
        <div className="stat-title text-base-content/70">{title}</div>
        <div className="stat-value text-primary">{value}</div>
        {description && <div className="stat-desc text-base-content/60">{description}</div>}
      </div>
    </div>
  )
}
```

## Layout Components

### **Page Layout Standards**
```tsx
// components/ui/page-layouts.tsx
"use client"

interface PageLayoutProps {
  children: React.ReactNode
  title?: string
  description?: string
  actions?: React.ReactNode
}

// Standard Page Layout
export function PageLayout({ children, title, description, actions }: PageLayoutProps) {
  return (
    <div className="min-h-screen bg-base-200">
      <div className="container mx-auto px-4 py-8 max-w-6xl">
        {(title || description || actions) && (
          <div className="mb-8">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
              <div>
                {title && <H1 className="mb-2">{title}</H1>}
                {description && <BodyText className="text-base-content/70">{description}</BodyText>}
              </div>
              {actions && <div className="flex gap-2">{actions}</div>}
            </div>
          </div>
        )}
        {children}
      </div>
    </div>
  )
}

// Dashboard Layout
export function DashboardLayout({ children, title, description, actions }: PageLayoutProps) {
  return (
    <div className="min-h-screen bg-base-100">
      {/* Header */}
      <div className="bg-base-200 border-b border-base-300">
        <div className="container mx-auto px-4 py-6 max-w-6xl">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div>
              {title && <H2 className="mb-1">{title}</H2>}
              {description && <BodyText className="text-base-content/70">{description}</BodyText>}
            </div>
            {actions && <div className="flex gap-2">{actions}</div>}
          </div>
        </div>
      </div>
      
      {/* Content */}
      <div className="container mx-auto px-4 py-8 max-w-6xl">
        {children}
      </div>
    </div>
  )
}

// Centered Layout (Auth pages, forms)
export function CenteredLayout({ children, title, description }: PageLayoutProps) {
  return (
    <div className="min-h-screen bg-base-200 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        {(title || description) && (
          <div className="text-center mb-8">
            {title && <H2 className="mb-2">{title}</H2>}
            {description && <BodyText className="text-base-content/70">{description}</BodyText>}
          </div>
        )}
        {children}
      </div>
    </div>
  )
}
```

## Responsive Design Patterns

### **Grid Layouts**
```tsx
// components/ui/grid-layouts.tsx
"use client"

interface GridProps {
  children: React.ReactNode
  className?: string
}

// Responsive Card Grid
export function CardGrid({ children, className = "" }: GridProps) {
  return (
    <div className={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 ${className}`}>
      {children}
    </div>
  )
}

// Stats Grid
export function StatsGrid({ children, className = "" }: GridProps) {
  return (
    <div className={`grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 ${className}`}>
      {children}
    </div>
  )
}

// Two Column Layout
export function TwoColumnLayout({ 
  sidebar, 
  main, 
  className = "" 
}: { 
  sidebar: React.ReactNode
  main: React.ReactNode
  className?: string 
}) {
  return (
    <div className={`grid grid-cols-1 lg:grid-cols-4 gap-8 ${className}`}>
      <div className="lg:col-span-1">
        {sidebar}
      </div>
      <div className="lg:col-span-3">
        {main}
      </div>
    </div>
  )
}
```

### **Spacing Standards**
```tsx
// Use consistent spacing classes throughout the app

// Container Spacing
const containerClasses = {
  page: "container mx-auto px-4 py-8 max-w-6xl",
  section: "mb-12",
  card: "p-6",
  form: "space-y-6"
}

// Gap Standards
const gapClasses = {
  tight: "gap-2",      // 8px - buttons in group, form elements
  normal: "gap-4",     // 16px - cards in list, nav items  
  relaxed: "gap-6",    // 24px - main content sections
  loose: "gap-8"       // 32px - page sections
}

// Margin/Padding Standards
const spacingClasses = {
  xs: "4px",   // p-1, m-1
  sm: "8px",   // p-2, m-2  
  md: "16px",  // p-4, m-4
  lg: "24px",  // p-6, m-6
  xl: "32px",  // p-8, m-8
  xxl: "48px"  // p-12, m-12
}
```

## Color and Theme Standards

### **DaisyUI Theme Usage**
```tsx
// Always use DaisyUI semantic color classes

// Text Colors
const textColors = {
  primary: "text-base-content",        // Main text
  secondary: "text-base-content/80",   // Secondary text  
  muted: "text-base-content/60",       // Muted text
  accent: "text-primary",              // Brand color text
  success: "text-success",             // Success states
  warning: "text-warning",             // Warning states
  error: "text-error"                  // Error states
}

// Background Colors
const backgroundColors = {
  page: "bg-base-200",        // Page background
  card: "bg-base-100",        // Card/container background
  input: "bg-base-100",       // Form inputs
  accent: "bg-primary",       // Brand accent
  success: "bg-success",      // Success states
  warning: "bg-warning",      // Warning states
  error: "bg-error"          // Error states
}

// Border Colors
const borderColors = {
  default: "border-base-300",    // Default borders
  accent: "border-primary",      // Accent borders
  success: "border-success",     // Success borders
  warning: "border-warning",     // Warning borders
  error: "border-error"         // Error borders
}
```

### **Custom CSS Variables**
```css
/* globals.css - Extend DaisyUI with custom properties */
:root {
  /* Animation timing */
  --transition-fast: 150ms ease-in-out;
  --transition-normal: 300ms ease-in-out;
  --transition-slow: 500ms ease-in-out;
  
  /* Shadows */
  --shadow-soft: 0 2px 8px rgba(0, 0, 0, 0.1);
  --shadow-medium: 0 4px 16px rgba(0, 0, 0, 0.1);
  --shadow-strong: 0 8px 32px rgba(0, 0, 0, 0.15);
  
  /* Border radius */
  --radius-sm: 0.375rem;   /* 6px */
  --radius-md: 0.5rem;     /* 8px */
  --radius-lg: 0.75rem;    /* 12px */
  --radius-xl: 1rem;       /* 16px */
}

/* Utility classes for custom properties */
.transition-fast { transition: all var(--transition-fast); }
.transition-normal { transition: all var(--transition-normal); }
.transition-slow { transition: all var(--transition-slow); }

.shadow-soft { box-shadow: var(--shadow-soft); }
.shadow-medium { box-shadow: var(--shadow-medium); }
.shadow-strong { box-shadow: var(--shadow-strong); }
```

## Component Creation Guidelines

### **Reusability Checklist**
Before creating a new component, ask:

1. **Will this be used in 2+ places?** → Create in `/components/ui/`
2. **Is this specific to one feature?** → Create in `/app/feature/_components/`
3. **Does it combine multiple DaisyUI components?** → Create composite component
4. **Is it purely visual with no logic?** → Consider as UI component
5. **Does it need state management?** → Create as client component

### **Component Structure Template**
```tsx
// components/ui/example-component.tsx
"use client" // or "use server"

import { H3, BodyText } from "@/components/ui/typography"
import { PrimaryButton } from "@/components/ui/button-variants"

interface ExampleComponentProps {
  title: string
  description?: string
  onAction?: () => void
  variant?: "default" | "compact" | "expanded"
  className?: string
  children?: React.ReactNode
}

export default function ExampleComponent({
  title,
  description,
  onAction,
  variant = "default",
  className = "",
  children
}: ExampleComponentProps) {
  const variantClasses = {
    default: "p-6",
    compact: "p-4",
    expanded: "p-8"
  }

  return (
    <div className={`card bg-base-100 shadow-lg ${variantClasses[variant]} ${className}`}>
      <div className="card-body">
        <H3 className="card-title">{title}</H3>
        {description && <BodyText>{description}</BodyText>}
        {children}
        {onAction && (
          <div className="card-actions justify-end mt-4">
            <PrimaryButton onClick={onAction}>
              Action
            </PrimaryButton>
          </div>
        )}
      </div>
    </div>
  )
}

// Export variants if needed
export function CompactExampleComponent(props: Omit<ExampleComponentProps, "variant">) {
  return <ExampleComponent {...props} variant="compact" />
}
```

### **Component File Organization**
```
components/
├── ui/                          # Reusable UI components
│   ├── typography.tsx           # Text components
│   ├── button-variants.tsx      # Button components
│   ├── form-elements.tsx        # Form components
│   ├── card-variants.tsx        # Card components
│   ├── grid-layouts.tsx         # Layout components
│   ├── page-layouts.tsx         # Page structure
│   └── navigation.tsx           # Navigation components
├── features/                    # Feature-specific components
│   ├── auth/                    # Auth-related components
│   ├── dashboard/               # Dashboard components
│   └── ...
└── utilities/                   # Utility components
    ├── loading-states.tsx       # Skeletons, spinners
    ├── error-boundaries.tsx     # Error handling
    └── providers.tsx           # Context providers
```

## Accessibility Standards

### **ARIA and Semantic HTML**
```tsx
// Always use semantic HTML and ARIA attributes
export function AccessibleCard({ title, children }: { title: string; children: React.ReactNode }) {
  return (
    <article className="card bg-base-100 shadow-lg" role="article">
      <div className="card-body">
        <h2 className="card-title" id="card-title">
          {title}
        </h2>
        <div aria-labelledby="card-title">
          {children}
        </div>
      </div>
    </article>
  )
}

// Form accessibility
export function AccessibleForm({ children }: { children: React.ReactNode }) {
  return (
    <form className="space-y-6" role="form" aria-label="Contact form">
      {children}
    </form>
  )
}
```

### **Focus Management**
```tsx
// Ensure interactive elements are keyboard accessible
export function KeyboardFriendlyButton({ children, onClick }: { children: React.ReactNode; onClick: () => void }) {
  return (
    <button
      className="btn btn-primary focus:ring-2 focus:ring-primary focus:ring-offset-2"
      onClick={onClick}
      onKeyDown={(e) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault()
          onClick()
        }
      }}
    >
      {children}
    </button>
  )
}
```

## Animation Standards

### **Consistent Transitions**
```tsx
// Use consistent transition classes
const transitionClasses = {
  fast: "transition-all duration-150 ease-in-out",
  normal: "transition-all duration-300 ease-in-out", 
  slow: "transition-all duration-500 ease-in-out",
  
  // Specific transitions
  transform: "transition-transform duration-300 ease-in-out",
  opacity: "transition-opacity duration-300 ease-in-out",
  colors: "transition-colors duration-300 ease-in-out"
}

// Hover effects
export function AnimatedCard({ children }: { children: React.ReactNode }) {
  return (
    <div className="card bg-base-100 shadow-lg hover:shadow-xl transition-shadow duration-300 ease-in-out">
      <div className="card-body">
        {children}
      </div>
    </div>
  )
}
```

## Design Checklist

### **Before Creating Components**
- [ ] Check if similar component already exists
- [ ] Determine reusability (ui/ vs feature-specific)
- [ ] Use DaisyUI classes as foundation
- [ ] Include proper TypeScript interfaces
- [ ] Add accessibility attributes
- [ ] Use consistent spacing/typography
- [ ] Test responsive behavior
- [ ] Add hover/focus states
- [ ] Follow naming conventions

### **Code Review Checklist**
- [ ] Uses DaisyUI semantic classes
- [ ] Consistent with typography scale
- [ ] Proper responsive design
- [ ] Accessible markup
- [ ] Reusable component structure
- [ ] TypeScript interfaces defined
- [ ] Consistent spacing patterns
- [ ] Follows naming conventions
