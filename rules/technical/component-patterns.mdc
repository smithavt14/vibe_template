---
description: 
globs: 
alwaysApply: false
---
# Component Patterns

## File Organization

### **Component Structure**
```
- `components/` - Shared components
  - `ui/` - UI components (shadcn)
  - `utilities/` - Utility components
- `app/(routes)/_components/` - Route-specific components
```

### **Naming Conventions**
- Use kebab-case: `example-component.tsx`
- Client components in route `_components` folders for one-off use
- Shared components in root `components/` folder
- Always add `"use server"` or `"use client"` directive

## Server Components

### **Basic Pattern**
```tsx
"use server"

interface ExampleServerComponentProps {
  userId: string
}

export async function ExampleServerComponent({
  userId
}: ExampleServerComponentProps) {
  // Server-side logic here
  return <div>Server component for user: {userId}</div>
}
```

### **Data Fetching with Suspense**
```tsx
"use server"

import { Suspense } from "react"
import { getSomeData } from "@/actions/db/example-actions"
import SomeComponent from "./_components/some-component"
import SomeSkeleton from "./_components/some-skeleton"

export default async function ExampleServerPage() {
  return (
    <Suspense fallback={<SomeSkeleton />}>
      <DataFetcher />
    </Suspense>
  )
}

async function DataFetcher() {
  const { data } = await getSomeData()
  return <SomeComponent initialData={data || []} />
}
```

### **Server Layout Pattern**
```tsx
"use server"

export default async function ExampleServerLayout({
  children
}: {
  children: React.ReactNode
}) {
  return (
    <div className="min-h-screen bg-base-100">
      <header>Navigation here</header>
      <main>{children}</main>
    </div>
  )
}
```

### **Server Page with Params**
```tsx
"use server"

interface PageProps {
  params: Promise<{ id: string }>
}

export default async function ExamplePage({ params }: PageProps) {
  const { id } = await params
  
  return (
    <div>
      <h1>Page for ID: {id}</h1>
    </div>
  )
}
```

## Client Components

### **Basic Pattern**
```tsx
"use client"

interface ExampleClientComponentProps {
  initialData: any[]
  onUpdate?: (data: any) => void
}

export default function ExampleClientComponent({
  initialData,
  onUpdate
}: ExampleClientComponentProps) {
  const [data, setData] = useState(initialData)

  const handleUpdate = (newData: any) => {
    setData(newData)
    onUpdate?.(newData)
  }

  return (
    <div>
      {data.map((item) => (
        <div key={item.id}>{item.name}</div>
      ))}
    </div>
  )
}
```

### **Form Handling Pattern**
```tsx
"use client"

import { useState } from "react"
import { createExampleAction } from "@/actions/db/example-actions"

interface ExampleFormProps {
  onSuccess?: () => void
}

export default function ExampleForm({ onSuccess }: ExampleFormProps) {
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState("")

  const handleSubmit = async (formData: FormData) => {
    setIsLoading(true)
    setError("")

    const result = await createExampleAction({
      content: formData.get("content") as string
    })

    if (result.isSuccess) {
      onSuccess?.()
    } else {
      setError(result.message)
    }

    setIsLoading(false)
  }

  return (
    <form action={handleSubmit} className="space-y-4">
      <input
        name="content"
        placeholder="Enter content"
        className="input input-bordered w-full"
        required
      />
      
      {error && (
        <div className="alert alert-error">
          <span>{error}</span>
        </div>
      )}
      
      <button 
        type="submit" 
        className="btn btn-primary"
        disabled={isLoading}
      >
        {isLoading ? "Submitting..." : "Submit"}
      </button>
    </form>
  )
}
```

## Component Composition

### **Server + Client Pattern**
```tsx
// Server Page
"use server"

import { Suspense } from "react"
import { getUserData } from "@/actions/db/user-actions"
import UserDashboard from "./_components/user-dashboard"

export default async function DashboardPage() {
  return (
    <Suspense fallback={<div>Loading dashboard...</div>}>
      <DashboardFetcher />
    </Suspense>
  )
}

async function DashboardFetcher() {
  const { data: userData } = await getUserData()
  
  // Pass server data to client component
  return <UserDashboard initialUserData={userData} />
}
```

```tsx
// Client Component
"use client"

import { useState } from "react"

interface UserDashboardProps {
  initialUserData: any
}

export default function UserDashboard({ 
  initialUserData 
}: UserDashboardProps) {
  const [userData, setUserData] = useState(initialUserData)

  // Client-side interactions
  return (
    <div>
      <h1>Welcome, {userData.name}</h1>
      {/* Interactive dashboard components */}
    </div>
  )
}
```

## Styling Patterns

### **DaisyUI Component Usage**
```tsx
"use client"

export default function ExampleCard() {
  return (
    <div className="card bg-base-100 shadow-xl">
      <div className="card-body">
        <h2 className="card-title">Card Title</h2>
        <p>Card content here</p>
        <div className="card-actions justify-end">
          <button className="btn btn-primary">Action</button>
        </div>
      </div>
    </div>
  )
}
```

### **Responsive Layout**
```tsx
export default function ResponsiveGrid({ children }: { children: React.ReactNode }) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6">
      {children}
    </div>
  )
}
```

## Error Boundaries

### **Error Boundary Pattern**
```tsx
"use client"

import { ErrorBoundary } from "react-error-boundary"

function ErrorFallback({ error, resetErrorBoundary }: any) {
  return (
    <div className="alert alert-error">
      <div>
        <h3>Something went wrong:</h3>
        <pre>{error.message}</pre>
        <button className="btn btn-sm" onClick={resetErrorBoundary}>
          Try again
        </button>
      </div>
    </div>
  )
}

export default function ComponentWithErrorBoundary() {
  return (
    <ErrorBoundary FallbackComponent={ErrorFallback}>
      <YourComponent />
    </ErrorBoundary>
  )
}
```

## Loading States

### **Skeleton Pattern**
```tsx
export default function ExampleSkeleton() {
  return (
    <div className="animate-pulse space-y-4">
      <div className="skeleton h-4 w-3/4"></div>
      <div className="skeleton h-4 w-1/2"></div>
      <div className="skeleton h-32 w-full"></div>
    </div>
  )
}
```

### **Loading Button State**
```tsx
"use client"

interface LoadingButtonProps {
  isLoading: boolean
  children: React.ReactNode
  onClick?: () => void
}

export default function LoadingButton({ 
  isLoading, 
  children, 
  onClick 
}: LoadingButtonProps) {
  return (
    <button 
      className={`btn btn-primary ${isLoading ? 'loading' : ''}`}
      onClick={onClick}
      disabled={isLoading}
    >
      {isLoading ? 'Loading...' : children}
    </button>
  )
}
```
